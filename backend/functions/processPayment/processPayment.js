let admin=require("firebase-admin"),serviceAccount=require("../firebase-admin-serviceAccountKey.json"),db=(admin.apps.length||admin.initializeApp({credential:admin.credential.cert(serviceAccount)}),admin.firestore());async function updatePlan(e,t){try{var a=db.collection("users").doc(e),r=new Date;r.setMonth(r.getMonth()+1),await a.update({last_plan_purchase_time:admin.firestore.FieldValue.serverTimestamp(),plan_expiry_date:r,plan:t})}catch(e){throw e}}async function logPayment(e,t,a){try{await db.collection("payment_log").add({uid:e,plan:t,status:a.status,statusText:a.statusText,timestamp:admin.firestore.FieldValue.serverTimestamp()})}catch(e){throw e}}exports.handler=async(e,t)=>{var a={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type"};if("OPTIONS"==e.httpMethod)return{statusCode:200,headers:a,body:JSON.stringify({message:"success"})};e=JSON.parse(e.body);try{var r=Buffer.from(PAYPAL_CLIENT_ID+":"+PAYPAL_CLIENT_SECRET).toString("base64"),s=await fetch(`https://api-m.paypal.com/v2/checkout/orders/${e.orderId}/capture`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Basic "+r}});return await logPayment(e.uid,e.plan,await s),console.log(s),s.ok&&await updatePlan(e.uid,e.plan),{statusCode:await s.status,headers:a,body:JSON.stringify({orderDetails:s})}}catch(e){return console.error("Error verifying ID token:",e),{statusCode:500,headers:a,body:JSON.stringify({message:"Something went wrong"})}}};