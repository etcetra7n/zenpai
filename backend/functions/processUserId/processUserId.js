let admin=require("firebase-admin"),serviceAccount=require("../firebase-admin-serviceAccountKey.json");async function enterUserToDatabase(e,i){try{var a=admin.firestore().collection("users").doc(e.uid);(await a.get()).exists?await a.update({last_login_time:admin.firestore.FieldValue.serverTimestamp(),no_of_logins:admin.firestore.FieldValue.increment(1),temp_id:i}):await a.set({name:e.name,last_login_time:admin.firestore.FieldValue.serverTimestamp(),email:e.email,uid:e.uid,plan:"free",last_plan_purchase_time:admin.firestore.FieldValue.serverTimestamp(),no_of_logins:1,temp_id:i,account_creation_time:admin.firestore.FieldValue.serverTimestamp()})}catch(e){throw e}}admin.apps.length||admin.initializeApp({credential:admin.credential.cert(serviceAccount)}),exports.handler=async(e,i)=>{var a={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type"};if("OPTIONS"==e.httpMethod)return{statusCode:200,headers:a,body:JSON.stringify({message:"success"})};var r=JSON.parse(e.body).userIdToken,e=JSON.parse(e.body).temp_id;try{var t=await admin.auth().verifyIdToken(r);return await enterUserToDatabase(t,e),{statusCode:200,headers:a,body:JSON.stringify({email:t.email,uid:t.uid})}}catch(e){return console.error("Error verifying ID token:",e),{statusCode:401,headers:a,body:JSON.stringify({message:"Invalid"})}}};