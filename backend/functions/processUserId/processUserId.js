let admin=require("firebase-admin"),serviceAccount=require("../firebase-admin-serviceAccountKey.json"),firestore=require("firebase/firestore");async function enterUserToDatabase(t,a){try{let i=admin.firestore().collection("users").doc(t.uid);i.get().then(e=>{if(e.exists){let r=!1;i.onSnapshot(e=>{r||(i.update({last_login_time:admin.firestore.FieldValue.serverTimestamp(),no_of_logins:admin.firestore.FieldValue.increment(1),temp_id:a}),r=!0)})}else{let r=!1;i.onSnapshot(e=>{r||(i.set({name:t.name,last_login_time:admin.firestore.FieldValue.serverTimestamp(),email:t.email,uid:t.uid,plan:"free",last_plan_purchase_time:admin.firestore.FieldValue.serverTimestamp(),no_of_logins:1,temp_id:a,account_creation_time:admin.firestore.FieldValue.serverTimestamp()}),r=!0)})}})}catch(e){throw e}}admin.apps.length||admin.initializeApp({credential:admin.credential.cert(serviceAccount)}),exports.handler=async(e,r)=>{var i={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type"};if("OPTIONS"==e.httpMethod)return{statusCode:200,headers:i,body:JSON.stringify({message:"success"})};var t=JSON.parse(e.body).userIdToken,e=JSON.parse(e.body).tempId;try{var a=await admin.auth().verifyIdToken(t);return await enterUserToDatabase(a,e),{statusCode:200,headers:i,body:JSON.stringify({email:a.email,uid:a.uid})}}catch(e){return console.error("Error verifying ID token:",e),{statusCode:500,headers:i,body:JSON.stringify({message:"Internal server error"})}}};